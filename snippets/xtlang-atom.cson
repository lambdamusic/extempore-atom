".source.extempore":
  'aref':
    'prefix': "aref "
    'body': "(aref$1 ${2:dat} ${3:index})"
  'aset':
    'prefix': "aset"
    'body': "(aset! ${1:dat} ${2:index} ${3:value})"
  assoc:
    prefix: "assoc "
    body: "(assoc $1 '(($0)))"
  "bind-alias":
    prefix: "binda "
    body: "(bind-alias ${1:name} ${2:type})"
  "bind-func-let":
    prefix: "bflet "
    body: '''
      (bind-func ${1:func-name}
        (let (($2))
          (lambda ($3)
            $0)))
    '''
  "bind-func":
    prefix: "bf "
    body: '''
      (bind-func ${1:func-name}
        (lambda ($2)
          $0))
    '''
  "bind-lib":
    prefix: "bindl "
    body: "(bind-lib ${1:lib-name} ${2:fn-name} ${3:type})"
  "bind-type":
    prefix: "bindt "
    body: "(bind-type ${1:name} ${2:type})"
  "bind-val":
    prefix: "bindv "
    body: "(bind-val ${1:name} ${2:type} ${3:value})"
  "build-multi-chan-2":
    prefix: "bmc2 "
    body: '''
      (if *build-multi-chan*
          (bind-func ${1:name}_mc_c
            (lambda (nchan:i64$2)
      	(let (($1_buf:[$3]** (zalloc nchan))
      	      (i:i64 0))
      	  (dotimes (i nchan) (pset! $1_buf i ($1_c$2)))
      	  (lambda (chan${4:osc-args})
      	    ((pref $1_buf (dtoi64 chan))$4))))))
    '''
  "build-multi-chan":
    prefix: "bmc "
    body: '''
      (if *build-multi-chan*
          (bind-func ${1:name}_mc_c
            (lambda ($2)
      	(let ((val 0.0)
      	      ($1 ($1_c $2)))
      	  (lambda (chan${3:osc-args})
      	    (if (< chan 1.0) (set! val ($1$3)))
      	    val)))))
    '''
  "call-inst":
    prefix: "inst "
    body: "(${1:inst-name} in time chan dat)"
  "column-major":
    prefix: "colmaj "
    body: '''
      (col_maj (lambda (r c)
      	    (+ r (* c ${1:num_rows}))))
    '''
  "compile-module":
    prefix: "compilemod "
    body: '''
      (llvm:export-module "`module-path`${1:core}/${2:libname}.bc")

      ;; shell command to generate dylib
      ;; /usr/local/Cellar/llvm/3.2/bin/llc -O3 -relocation-model=pic -tailcallopt /Users/ben/Code/xtm/dylibs/$2.bc && clang -v -dynamic -undefined dynamic_lookup `module-path`$1/$2.s -o `module-path`$1/$2.dylib

      (define $2 (sys:open-dylib "`module-path`$1/$2.dylib"))

      ;; once you've prepared the header with `extempore-create-xtmh-header'
      (load "libs/core/$2.xtmh")
    '''
  "cond-mod":
    prefix: "cm "
    body: '''
      (cond ((< (modulo beat ${1:1}) ${2:0})$0)
            (else ${3:0}))
    '''
  cond:
    prefix: "cond "
    body: '''
      (cond (($0))
            (else 0))
    '''
  "cos-frame":
    prefix: "cosf "
    body: "(cos_frame frame ${1:[dc]} ${2:amp} ${3:freq})"
  "cos-iter-var":
    prefix: "cosi "
    body: "(cos_iter ${1:[phase_offset]} ${2:i} ${3:n})"
  "cos-xtlang":
    prefix: "cosx "
    body: "(cos (/ (* TWOPI time ${1:frequency}) SR))"
  cosr:
    prefix: "cosr "
    body: "(cosr ${1:dc} ${2:amp} ${3:freq})"
  "define-inst":
    prefix: "dinst "
    body: '''
      (bind-func ${1:name}_note_c
        (lambda (nargs:i64 dargs:float*)
          (lambda (time:i64 chan:i64 freq:float amp:float)
            $0)))

      (bind-func $1_fx
        (lambda (in:float time:i64 chan:i64 dat:float*)
          ))

      (define-instrument $1 $1_note_c $1_fx)

      ($1.attack 200.0)
      ($1.decay 200.0)
      ($1.release 1000.0)
      ($1.sustain 0.6)
    '''
  "sampler-setup":
    prefix: "dsamp "
    body: '''
      (load "libs/external/instruments.xtm")
      (load "/Users/ben/Code/xtm/lib/sampler-maps.xtm")

      (define-sampler ${1:sampler-name} sampler_note_hermite_c sampler_fx)

      (sm-load-map $1 ${2:sample-map})
    '''
  define:
    prefix: "df "
    body: '''
      (define ${1:func-name}
        (lambda ($2)
          $0))
    '''
  "dotimes-path":
    prefix: "dtpath "
    body: '''
      (dotimes (i n)
        (xtm_paint_setup_fill fill 1. 1. 1. 1.)
        (xtm_paint_setup_stroke stroke 1. 1. 1. 1. 1.)
        (xtm_draw_rect$0 0. 0. width height))
    '''
  dotimes:
    prefix: "dotimes "
    body: '''
      (dotimes (${1:i} ${2:[start] num})
        $0)
    '''
  dsp:
    prefix: "dsp "
    body: '''
      (bind-func dsp:[float,float,i64,i64,float*]*
        (lambda (in time chan dat)
          $0))

      ${1:(dsp:set! dsp)}
    '''
  "for-each":
    prefix: "feach "
    body: "(for-each (lambda ($0)))"
  "gl-loop":
    prefix: "glloop "
    body: '''
      (sys:load "libs/xtm.xtm")
      (sys:load "libs/external/shaders.xtm")

      (define width ${1:`(display-pixel-width)`.0})
      (define height ${2:`(display-pixel-height)`.0})
      (bind-val width float $1)
      (bind-val height float $2)
      (define fullscreen ${3:#t})

      (define *gl-ctx* (gl:make-ctx ":0.0" fullscreen 0.0 0.0 width height))
      (xtm_render_setup (real->integer width) (real->integer height))

      (bind-func post:XTMRENDERCB
        (lambda (frame shader m v p data)
          $0
          void))

      (bind-func gl_render
        (lambda ()
          ;;          pre  opaq trans post data
          (xtm_render null null null  post null)
          void))

      (define gl-loop
        (lambda (time delta-t$9)
          (gl_render)
          (gl:swap-buffers *gl-ctx*)
          (callback (+ time (* *second* delta-t) 0.9)
      	      'gl-loop
      	      (+ time (* *second* delta-t))
      	      delta-t$9)))

      (gl-loop (now) ${10:1/30})
    '''
  "header-primary":
    prefix: "headerp "
    body: "(sys:load \"`default-directory`setup.xtm\")"
  "header-utility":
    prefix: "headeru "
    body: '''
      ;-*- mode: Extempore; extempore-default-port: 7098; -*-
      (ipc:load "primary" "`default-directory`setup.xtm")

    '''
  "if-alternating":
    prefix: "ifalt "
    body: "(if (= ${1:var} ${2:a}) ${3:b} $2)"
  "if-falling":
    prefix: "iffall "
    body: "(if (> ${1:var} ${2:min-val}) (- $1 ${3:inc}) ${4:max-val})"
  "if-mod-frame":
    prefix: "imf "
    body: "(if (${1:=} (modulo frame ${2:30}) ${3:0}) $0)"
  "if-mod-xtlang":
    prefix: "imx "
    body: "(if (${1:=} (modulo (/ time SR) ${2:1.0}) ${3:0.0}) $0)"
  "if-mod":
    prefix: "im "
    body: "(if (${1:=} (modulo beat ${2:1}) ${3:0}) $0)"
  "if-not-null":
    prefix: "inn "
    body: "(if (not (null? $1))$0)"
  "if-null-set":
    prefix: "ifnull "
    body: "(if (null? ${1:x}) (set! $1 $0))"
  "if-rising":
    prefix: "ifris "
    body: "(if (< ${1:var} ${2:max-val}) (+ $1 ${3:inc}) ${4:min-val})"
  inc:
    prefix: "inc "
    body: "(set! ${1:var} (${2:+} $1 $0))"
  "ipc-bind-func":
    prefix: "ipcbf "
    body: "(ipc:bind-func \"${1:utility}\" '${2:func_name})"
  lambda:
    prefix: "lambda "
    body: "(lambda ($0))"
  b_lambda:
    prefix: "\(lambda\)"
    body: "(lambda ($0))"
  let:
    prefix: "let "
    body: "(let (($0)))"
  "lib-loader-config":
    prefix: "libconf "
    body: '''
      (sys:load-preload-check '${1:libname})
      (define *xtmlib-$1-loaded* #f)
      (print "Loading $1 library...")
      (define *xtmlib-$1-loaded* #t)
      (print "done.\\n")
    '''
  "load-module":
    prefix: "loadmod "
    body: '''
      (define ${1:libname} (sys:open-dylib "/Users/ben/Code/xtm/dylibs/$1.dylib"))
      (load "libs/${2:core}/$1.xtmh")
    '''
  "load-sampler":
    prefix: "loadsamp "
    body: "(load-sampler ${1:sampler} ${2:\"~/Documents/samples/\"} ${3:bank} ${4:parse-sample-names-1})"
  load:
    prefix: "load "
    body: "(sys:load \"libs/$0.xtm\")"
  "map-1":
    prefix: "map1 "
    body: "(map (lambda (${1:x}) ($0$1)))"
  map:
    prefix: "map "
    body: "(map (lambda ($0)))"
  "metro-get-beat":
    prefix: "mgb "
    body: "(*metro* 'get-beat ${1:4})"
  "metro-set-tempo":
    prefix: "mst "
    body: "(*metro* 'set-tempo ${1:120})"
  "mplay":
    prefix: "mplay "
    body: "(mplay ${1:device} ${2:pitch} ${3:vel} ${4:dur} ${5:channel})"
  "midi-play-chord":
    prefix: "mpchord "
    body: '''
      (for-each (lambda (p)
      	    (mplay ${1:device} p ${2:vel} ${3:dur} ${4:channel}))
      	  (pc:make-chord ${5:lower} ${6:upper} ${7:voices} ${8:'(0 2 4 5 7 9 11)}))
    '''
  "nargs-test":
    prefix: "ifnargs "
    body: "(if (> nargs ${1:0}) (pref dargs $1) ${2:else-val})"
  "new-process":
    prefix: "ipcnew "
    body: '''
      (ipc:new "${1:process-name}" ${2:port})
      (ipc:bind-func "$1" '${3:func_name})
      (ipc:call-async "$1" '$3)
    '''
  "openvg-frame":
    prefix: "vgframe "
    body: '''
      (bind-func vgframe:XTMRENDERCB
        (lambda (frame shader m v p data)
          (let ((path (xtm_create_vgpath))
      	  (stroke (vgCreatePaint))
      	  (fill (vgCreatePaint))
      	  (i:float 0.)
      	  (n:float 10.))
            (xtm_vg_reset_matrices)
            ;; (xtm_vg_clear 0. 0. 0. 1. (ftoi32 width) (ftoi32 height))
            (xtm_paint_setup_fill fill 1. 1. 1. 1.)
            (xtm_paint_setup_stroke stroke 1. 1. 1. 1. 10.)
            ;; create the path
            $0
            ;; (xtm_draw_path path)
            ;; cleanup
            (xtm_destroy_paint fill)
            (xtm_destroy_paint stroke)
            (xtm_vg_print_error))
          void))
    '''
  "openvg-loop":
    prefix: "vgloop "
    body: '''
      (define width ${1:`(display-pixel-width)`.0})
      (define height ${2:`(display-pixel-height)`.0})
      (bind-val width float width)
      (bind-val height float height)
      (define fullscreen ${3:#t})

      (sys:load "/Users/ben/Code/xtm/lib/vg-setup.xtm")

      (ipc:xtm-render-setup "utility")

      (bind-func gl_render
        (lambda ()
          ;;          pre  opaq trans post    data
          (xtm_render null null null  vgframe null)
          void))

    '''
  "pc:chord-options":
    prefix: "pcopt "
    body: "(pc:chord-options ${1:root} '${2:^} ${3:pc}$0)"
  "pc:chord":
    prefix: "pcchord "
    body: "(pc:chord ${1:root} '${2:$$(yas/choose-value '(\"^\" \"^sus\" \"^6\" \"^64\" \"^7\" \"^65\" \"^43\" \"^42\" \"^2\" \"^7#4\" \"^9\" \"7\" \"9\" \"65\" \"43\" \"2\" \"42\" \"-\" \"-sus\" \"-6\" \"-64\" \"-7\" \"-65\" \"-43\" \"-42\" \"-2\" \"-9\" \"o\" \"o6\" \"o64\" \"o7\" \"o65\" \"o43\" \"o42\" \"o2\" \"-7b5\"))})"
  "pc-diatonic":
    prefix: "pcdia "
    body: "(pc:diatonic ${1:root} '${2:^-} '${3:degree})"
  "pc:make-chord":
    prefix: "pcmc "
    body: "(pc:make-chord ${1:lower} ${2:upper} ${3:number} ${4:pcchord}$0)"
  "pc:quantize":
    prefix: "pcquant "
    body: "(pc:quantize ${1:pitch-in} ${2:pcscale}$0)"
  "pc-random":
    prefix: "pcrand "
    body: "(pc:random ${1:lower} ${2:upper} ${3:pcscale}$0)"
  "pc:relative":
    prefix: "pcrel "
    body: "(pc:relative ${1:pitch} ${2:step} pcscale$0)"
  "pc:scale":
    prefix: "pcscale "
    body: "(pc:scale ${1:0} '${2:$$(yas/choose-value '(\"pentatonic\" \"wholetone\" \"chromatic\" \"octatonic\" \"messiaen1\" \"messiaen2\" \"messiaen3\" \"messiaen4\" \"messiaen5\" \"messiaen6\" \"messiaen7\" \"ionian\" \"dorian\" \"phrygian\" \"lydian\" \"lydian-dominant\" \"lydian-mixolydian\" \"mixolydian\" \"aeolian\" \"locrian\"))})"
  "play-chord":
    prefix: "pchord "
    body: '''
      (for-each (lambda (p)
      	    (play ${1:inst} p ${2:80} ${3:dur}))
      	  (pc:make-chord ${4:lower} ${5:upper} ${6:number} ${7:pcchord}$0))
    '''
  "play-note":
    prefix: "playnote "
    body: "(play-note (now) ${1:inst} ${2:60} ${3:80} ${4:44100})"
  play:
    prefix: "play "
    body: "(play ${1:inst} ${2:60} ${3:80} ${4:dur})"
  pref:
    prefix: "pref "
    body: "(pref$1 ${2:dat} ${3:index})"
  "printf-debug":
    prefix: "pfd "
    body: "(printf \"$1\\n\" ${1:$(replace-regexp-in-string \"\\\\\\\\(:\\\\\\\\| =\\\\\\\\) %\\\\\\\\(lld\\\\\\\\|d\\\\\\\\|f\\\\\\\\|p\\\\\\\\|s\\\\\\\\|c\\\\\\\\)\" \"\" yas-text)})"
  printf:
    prefix: "pf "
    body: "(printf \"$1\\n\"$0)"
  println:
    prefix: "pl "
    body: "(println $0)"
  prob:
    prefix: "prob "
    body: '''
      (if (< (random) ${1:prob})
          $0)
    '''
  pset:
    prefix: "pset "
    body: "(pset! ${1:dat} ${2:index} ${3:value})"
  quantize:
    prefix: "quant "
    body: "(- ${1:val} (% $1 ${2:step}))"
  "random-list":
    prefix: "rlist "
    body: "(random '($0))"
  "range-test":
    prefix: "rtest "
    body: "(if (and (>= ${1:x} ${2:lower}) (<= $1 ${3:upper})) $0)"
  rassoc:
    prefix: "rassoc "
    body: "(random (cdr (assoc ${1:key} '(($0)))))"
  scale:
    prefix: "scale "
    body: "(+ ${1:dc} (* ${2:amp} $0))"
  "set-up-instrument":
    prefix: "sinst "
    body: '''
      (define-instrument ${1:inst} $1_note_c $1_fx)

      ($1.attack 200.0)
      ($1.decay 200.0)
      ($1.release 1000.0)
      ($1.sustain 0.6)
    '''
  "stereo-cond":
    prefix: "scond "
    body: '''
      (cond ((< chan 0.5)
             ${1:out})
            ((< chan 1.5)
             ${1:$(replace-regexp-in-string "l\\\\\\\\>" "r" yas-text)})
            (else 0.0))
    '''
  "stereo-dsp":
    prefix: "sdsp "
    body: '''
      ($1l ($2_c$3))
      ($1r ($2_c$3))
    '''
  "sync-metro":
    prefix: "syncmetro "
    body: '''
      (ipc:connect "${1:server-ip}" "${2:server-name}" ${3:server-port})
      (clock:update-metro "$2" "${4:client-name}")
    '''
"temporal-recursion":
  prefix: "tr "
  body: '''
    (define ${1:fun-name}
      (lambda (beat dur)
        $0
        (callback (*metro* (+ beat (* .5 dur))) '$1 (+ beat dur) dur)))

    ($1 (*metro* 'get-beat ${2:4}) ${3:1/4})
  '''
  "temporal-recursion-rotate":
    prefix: "trr "
    body: '''
      (define ${1:fun-name}
        (lambda (beat dur lst inc)
          $0
          (mplay iac-out (car lst) 100 dur 0)
          (callback (*metro* (+ beat (* .5 dur))) '$1 (+ beat dur) dur
            (rotate lst inc) inc)))

      ($1 (*metro* 'get-beat ${2:4}) ${3:1/4} ${4:'(60)} ${5:1})
    '''
  "temporal-recursion-timed":
    prefix: "trt "
    body: '''
      (define ${1:fun-name}
        (lambda (time delta-t$2)
          $0
          (callback (+ time (* *second* delta-t) 0.5)
      	      '$1
      	      (+ time (* *second* delta-t))
      	      delta-t$2)))

      ($1 (now) ${4:1})
    '''
  "temporal-recursion-xtlang":
    prefix: "trx "
    body: '''
      (bind-func ${1:fun-name}
        (lambda (beat dur)
          $0
          (callback (*metro* (+ beat (* .5 dur))) '$1 (+ beat dur) dur)))

      ($1 (*metro* 'get-beat 4) ${2:1/4})
    '''
  tref:
    prefix: "tref "
    body: "(tref$1 ${2:dat} ${3:index})"
  tset:
    prefix: "tset"
    body: "(tset! ${1:dat} ${2:index} ${3:value})"
  ugen:
    prefix: "ugen "
    body: "(${1:osc} ${2:amp} ${3:freq})"
  "width-height-half":
    prefix: "wh2 "
    body: "(* width .5) (* height .5)"
  "width-height-random":
    prefix: "whr "
    body: "(* (random) width) (* (random) height)"
  "width-height-setup":
    prefix: "whsetup "
    body: '''
      (define width `(display-pixel-width)`.0)
      (define height `(display-pixel-height)`.0)
      (bind-val width float `(display-pixel-width)`.0)
      (bind-val height float `(display-pixel-height)`.0)
      (define fullscreen #t)

    '''
  "width-height":
    prefix: "wh "
    body: "width height"
  xtest:
    prefix: "xtest "
    body: '''
      (bind-func test_${1:name}
        (lambda ()
          $0))

      (test-xtfunc (test_$1))
    '''
  "xtlang-accessor":
    prefix: "xtacc "
    body: '''
      (bind-func ${1:tuple_name}_${2:field_name}
        (lambda (${3:tuple_var}:$1_t*)
          (tref $3 ${4:tuple_index})))

      (bind-func $1_set_$2
        (lambda ($3:$1_t* $2)
          (tset! $3 $4 $2)))
    '''
  "xtm-draw-path":
    prefix: "xdp "
    body: "(xtm_${1:draw}_path$2 path)"
  "xtm-lib-header":
    prefix: "xtmlibhead "
    body: '''
      ;;; `(buffer-name)` -- $1

      ;; Author: ${2:$$(yas/choose-value '("Andrew Sorensen" "Ben Swift"))}
      ;; Keywords: extempore
      ;; Required dylibs: $3

      ;;; Commentary:

      ;; $4

      ;;; Code:

      $0
    '''
  "xtm-path-rotate":
    prefix: "xtmrot "
    body: "(xtm_path_rotate $0)"
  "xtm-path-translate":
    prefix: "xtmtrans "
    body: "(xtm_path_translate $0)"
  "xtm-render-callback":
    prefix: "rendercb "
    body: '''
      (bind-func ${1:$$(yas/choose-value '("pre" "opaque" "transparent" "post" "data"))}:XTMRENDERCB
        (lambda (frame shader m v p data)
          $0
          void))
    '''
